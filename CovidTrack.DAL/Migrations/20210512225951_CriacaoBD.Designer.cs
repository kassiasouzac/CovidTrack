// <auto-generated />
using System;
using CovidTrack.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CovidTrack.DAL.Migrations
{
    [DbContext(typeof(Contexto))]
    [Migration("20210512225951_CriacaoBD")]
    partial class CriacaoBD
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CovidTrack.BLL.Models.CategoriaComorbidade", b =>
                {
                    b.Property<int>("ComorbidadeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(80)")
                        .HasMaxLength(80);

                    b.HasKey("ComorbidadeId");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            ComorbidadeId = 1,
                            Descricao = "Diabetes Melitus"
                        },
                        new
                        {
                            ComorbidadeId = 2,
                            Descricao = "Pneumopatias crônicas graves"
                        },
                        new
                        {
                            ComorbidadeId = 3,
                            Descricao = "Hipertensão arterial resistente (HAR)"
                        },
                        new
                        {
                            ComorbidadeId = 4,
                            Descricao = "Hipertensão arterial - estágio 3"
                        },
                        new
                        {
                            ComorbidadeId = 5,
                            Descricao = "Hipertensão arterial - estágio 1 e 2, com LOA ou comorbidade"
                        },
                        new
                        {
                            ComorbidadeId = 6,
                            Descricao = "Insuficiência cardíaca"
                        },
                        new
                        {
                            ComorbidadeId = 7,
                            Descricao = "Cor-pulmonale e Hipertensão pulmonar"
                        },
                        new
                        {
                            ComorbidadeId = 8,
                            Descricao = "Cardiopatia Hipertensiva"
                        },
                        new
                        {
                            ComorbidadeId = 9,
                            Descricao = "Síndromes coronarianas"
                        },
                        new
                        {
                            ComorbidadeId = 10,
                            Descricao = "Valvopatias"
                        },
                        new
                        {
                            ComorbidadeId = 11,
                            Descricao = "Miocardiopatias e pericardiopatias"
                        },
                        new
                        {
                            ComorbidadeId = 12,
                            Descricao = "Doenças da Aorta, dos grandes vasos e fístulas arteriovenosas"
                        },
                        new
                        {
                            ComorbidadeId = 13,
                            Descricao = "Arritmias cardíacas"
                        },
                        new
                        {
                            ComorbidadeId = 14,
                            Descricao = "Cardiopatia congênita no adulto"
                        },
                        new
                        {
                            ComorbidadeId = 15,
                            Descricao = "Próteses valvares e dispositivos cardíacos"
                        },
                        new
                        {
                            ComorbidadeId = 16,
                            Descricao = "Doença cerebrovascular"
                        },
                        new
                        {
                            ComorbidadeId = 17,
                            Descricao = "Doença renal crônica"
                        },
                        new
                        {
                            ComorbidadeId = 18,
                            Descricao = "Imunossuprimidos"
                        },
                        new
                        {
                            ComorbidadeId = 19,
                            Descricao = "Anemia falciforme"
                        },
                        new
                        {
                            ComorbidadeId = 20,
                            Descricao = "Obesidade mórbida"
                        },
                        new
                        {
                            ComorbidadeId = 21,
                            Descricao = "Sindrome de Down"
                        },
                        new
                        {
                            ComorbidadeId = 22,
                            Descricao = "Cirrose hepática"
                        });
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Checklist", b =>
                {
                    b.Property<int>("ChecklistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCheck")
                        .HasColumnType("bit")
                        .HasMaxLength(2);

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ChecklistId");

                    b.HasIndex("ItemId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.ChecklistItem", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("ItemId");

                    b.ToTable("Itens");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Funcao", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Funcoes");

                    b.HasData(
                        new
                        {
                            Id = "ecb16d4f-d21b-48c4-9f7c-79434a0c25db",
                            ConcurrencyStamp = "8e037d8f-28e3-4597-bc3b-5dc1d275ce61",
                            Descricao = "Administrador do Sistema",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "6079c5b4-8ccc-464b-992e-8f8d701d60e3",
                            ConcurrencyStamp = "418baf09-5bbe-44b8-892d-b7a7f2e13961",
                            Descricao = "Usuario do Sistema",
                            Name = "Usuario",
                            NormalizedName = "USUARIO"
                        });
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.LocalAtendimento", b =>
                {
                    b.Property<int>("LocalAtendimentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocalizacaoId")
                        .HasColumnType("int");

                    b.Property<string>("NomeLocal")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("LocalAtendimentoId");

                    b.HasIndex("LocalizacaoId");

                    b.ToTable("LocaisAtendimentos");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.LocalUsuario", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocalizacaoId")
                        .HasColumnType("int");

                    b.Property<string>("NomeLocal")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LocalId");

                    b.HasIndex("LocalizacaoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("LocaisUsuarios");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Localizacao", b =>
                {
                    b.Property<int>("LocalizacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Latidude")
                        .HasColumnType("real")
                        .HasMaxLength(12);

                    b.Property<float>("Longitude")
                        .HasColumnType("real")
                        .HasMaxLength(13);

                    b.HasKey("LocalizacaoId");

                    b.ToTable("Localizacoes");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Notificacao", b =>
                {
                    b.Property<int>("NotificacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataSegundaDose")
                        .HasColumnType("datetime2")
                        .HasMaxLength(10);

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasMaxLength(2);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VacinacaoId")
                        .HasColumnType("int");

                    b.HasKey("NotificacaoId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VacinacaoId");

                    b.ToTable("Notificacoes");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Questao", b =>
                {
                    b.Property<int>("QuestaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Pergunta")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.HasKey("QuestaoId");

                    b.ToTable("Questoes");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Questionario", b =>
                {
                    b.Property<int>("QuestionarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("QuestaoId")
                        .HasColumnType("int");

                    b.Property<string>("Resposta")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("QuestionarioId");

                    b.HasIndex("QuestaoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Questionarios");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CategoriaComorbidadeComorbidadeId")
                        .HasColumnType("int");

                    b.Property<int>("ComorbidadeId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataDeNascimento")
                        .HasColumnType("datetime2")
                        .HasMaxLength(10);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sobrenome")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CategoriaComorbidadeComorbidadeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Vacinacao", b =>
                {
                    b.Property<int>("VacinacaoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataVacinacao")
                        .HasColumnType("datetime2")
                        .HasMaxLength(10);

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("VacinaStatus")
                        .HasColumnType("bit")
                        .HasMaxLength(2);

                    b.HasKey("VacinacaoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Vacinacoes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Checklist", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.ChecklistItem", "ChecklistItem")
                        .WithMany("Checklists")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CovidTrack.BLL.Models.Usuario", "Usuario")
                        .WithMany("Checklists")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.LocalAtendimento", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Localizacao", "Localizacao")
                        .WithMany("LocalAtendimentos")
                        .HasForeignKey("LocalizacaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.LocalUsuario", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Localizacao", "Localizacao")
                        .WithMany("LocalUsuarios")
                        .HasForeignKey("LocalizacaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CovidTrack.BLL.Models.Usuario", "Usuario")
                        .WithMany("LocalUsuarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Notificacao", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Usuario", "Usuario")
                        .WithMany("Notificacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CovidTrack.BLL.Models.Vacinacao", "Vacinacao")
                        .WithMany("Notificacoes")
                        .HasForeignKey("VacinacaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Questionario", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Questao", "Questao")
                        .WithMany("Questionarios")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CovidTrack.BLL.Models.Usuario", "Usuario")
                        .WithMany("Questionarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Usuario", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.CategoriaComorbidade", "CategoriaComorbidade")
                        .WithMany("Usuarios")
                        .HasForeignKey("CategoriaComorbidadeComorbidadeId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("CovidTrack.BLL.Models.Vacinacao", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Usuario", "Usuario")
                        .WithMany("Vacinacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Funcao", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Funcao", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CovidTrack.BLL.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CovidTrack.BLL.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
